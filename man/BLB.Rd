% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bootstrap_omp.R
\name{BLB}
\alias{BLB}
\alias{BLB_R}
\alias{BLB_cluster}
\alias{BLB_omp_on_r}
\alias{BLB_omp_on_s}
\alias{BLB_omp_on_sr}
\alias{BLB_serial}
\title{Bag of Little Bootstraps for a vector}
\usage{
BLB_R(data, gamma, FUN, ..., s = 15, r = 100)

BLB_serial(data, gamma, s = 15, r = 100)

BLB_omp_on_s(data, gamma, s = 15, r = 100)

BLB_omp_on_r(data, gamma, s = 15, r = 100)

BLB_omp_on_sr(data, gamma, s = 15, r = 100)

BLB_cluster(data, gamma, cluster, s = 15, r = 100)
}
\arguments{
\item{data}{A vector of the original sample}

\item{gamma}{Controls the size of the subsamples - each subsample is of size b = (floor(length(data) ^ gamma). Ideally in gamma is in [0.5, 1]}

\item{FUN}{A function to calculate the estimator of the parameter of interest}

\item{s}{The number of subsamples}

\item{r}{The number of bootstrap replications (resamples) per subsample}
}
\value{
The mean across the s subsamples of the standard errors of the parameter estimates
}
\description{
Implements Bag of Little Bootstraps on a 1-d data vector. The statistic which is bootstrapped is the mean, with the exception of BLB_R, which can accept a generic function as the statistic.
}
\details{
The functions described here implement the Bag of Little Bootstraps (BLB) with varying degrees of efficiency.

\code{BLB_R} implements BLB entirely in R. It is the most generic function, in that it can accept any function (which acts on a vector) as the statistic to be bootstrapped. It is also by far the slowest implementations.

The rest of the functions are all implemented in C, but are built in to only be able to bootstrap the mean.

\code{BLB_serial} does not take advantage of any parallelism.

\code{BLB_omp_on_s} uses openMP to parallelise the for loop over the s subsampling steps, then runs a serial bootstrap function within each subsample.

\code{BLB_omp_on_r} does not parallelise over the s subsamples, but uses openMP to parallelise the for loop over the r resampling steps within each subsample.

\code{BLB_omp_on_rs} uses openMP to parallelise over both the subsampling and resampling loops.

\code{BLB_cluster} uses parallelism in R to send each of the s subsamples to different servers in the cluster, then uses openMP to parallelise the interations over the r resamples within each subsample.
}
\examples{
X <- rnorm(1000000, 0, 5)
BLB_R(X, mean, gamma=0.6)
BLB_serial(X, 0.9)
BLB_omp_on_s(X, 0.6)
BLB_omp_on_r(X, 0.6)
BLB_omp_on_sr(X, 0.6)
cluster <- c("greywagtail", "greyheron", "greypartridge", "greyplover")
BLB_cluster(X, 0.6, cluster, s=16, r=96)
}

